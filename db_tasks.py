import logging
import random
import string
import datetime

logger = logging.getLogger(__name__)

def create_schema(client):
    """
    Creates (or updates) the more complex DM schema
    and supporting tables/indexes for load testing.
    """

    # Because this is a big script, we can either break it into multiple
    # statements or run them in a single transaction. Below, we execute each
    # statement individually for clarity.
    
    schema_statements = [
        # Ensure __EFMigrationsHistory table
        """
        CREATE TABLE IF NOT EXISTS "__EFMigrationsHistory" (
            "MigrationId" character varying(150) NOT NULL,
            "ProductVersion" character varying(32) NOT NULL,
            CONSTRAINT "PK___EFMigrationsHistory" PRIMARY KEY ("MigrationId")
        );
        """,
        
        # Create DM schema if not exists
        """
        DO $EF$
        BEGIN
            IF NOT EXISTS(SELECT 1 FROM pg_namespace WHERE nspname = 'DM') THEN
                CREATE SCHEMA "DM";
            END IF;
        END $EF$;
        """,

        # CommonBaseType
        """
        CREATE TABLE IF NOT EXISTS "DM"."CommonBaseType" (
            "Id" integer GENERATED BY DEFAULT AS IDENTITY,
            "Title" character varying(255) NOT NULL,
            "Icon" character varying(64),
            "CreationDate" timestamp with time zone NOT NULL,
            "ModificationDate" timestamp with time zone,
            "IsDeleted" boolean NOT NULL,
            CONSTRAINT "PK_CommonBaseType" PRIMARY KEY ("Id")
        );
        """,

        # DeviceConfigTemplate
        """
        CREATE TABLE IF NOT EXISTS "DM"."DeviceConfigTemplate" (
            "Id" integer GENERATED BY DEFAULT AS IDENTITY,
            "Name" character varying(64) NOT NULL,
            "OsVersion" character varying(20) NOT NULL,
            "FreameverVersion" character varying(20) NOT NULL,
            "BootLoaderVersion" character varying(20) NOT NULL,
            "StartTime" timestamp with time zone NOT NULL,
            "EndTime" timestamp with time zone NOT NULL,
            "CreationDate" timestamp with time zone NOT NULL,
            "ModificationDate" timestamp with time zone,
            "IsDeleted" boolean NOT NULL,
            CONSTRAINT "PK_DeviceConfigTemplate" PRIMARY KEY ("Id")
        );
        """,

        # Province
        """
        CREATE TABLE IF NOT EXISTS "DM"."Province" (
            "Id" integer GENERATED BY DEFAULT AS IDENTITY,
            "Title" character varying(255) NOT NULL,
            "CreationDate" timestamp with time zone NOT NULL,
            "ModificationDate" timestamp with time zone,
            "IsDeleted" boolean NOT NULL,
            CONSTRAINT "PK_Province" PRIMARY KEY ("Id")
        );
        """,

        # CommonBaseValue
        """
        CREATE TABLE IF NOT EXISTS "DM"."CommonBaseValue" (
            "Id" integer GENERATED BY DEFAULT AS IDENTITY,
            "Title" character varying(255) NOT NULL,
            "Icon" character varying(64),
            "CommonBaseTypeId" integer NOT NULL,
            "CreationDate" timestamp with time zone NOT NULL,
            "ModificationDate" timestamp with time zone,
            "IsDeleted" boolean NOT NULL,
            CONSTRAINT "PK_CommonBaseValue" PRIMARY KEY ("Id"),
            CONSTRAINT "FK_CommonBaseValue_CommonBaseType_CommonBaseTypeId"
                FOREIGN KEY ("CommonBaseTypeId")
                REFERENCES "DM"."CommonBaseType" ("Id") ON DELETE RESTRICT
        );
        """,

        # DeviceConfigTemplateItem
        """
        CREATE TABLE IF NOT EXISTS "DM"."DeviceConfigTemplateItem" (
            "Id" integer GENERATED BY DEFAULT AS IDENTITY,
            "Name" character varying(64) NOT NULL,
            "Value" character varying(64) NOT NULL,
            "DeviceConfigTemplateId" integer NOT NULL,
            "CreationDate" timestamp with time zone NOT NULL,
            "ModificationDate" timestamp with time zone,
            "IsDeleted" boolean NOT NULL,
            CONSTRAINT "PK_DeviceConfigTemplateItem" PRIMARY KEY ("Id"),
            CONSTRAINT "FK_DeviceConfigTemplateItem_DeviceConfigTemplate_DeviceConfigT~"
                FOREIGN KEY ("DeviceConfigTemplateId")
                REFERENCES "DM"."DeviceConfigTemplate" ("Id") ON DELETE RESTRICT
        );
        """,

        # City
        """
        CREATE TABLE IF NOT EXISTS "DM"."City" (
            "Id" integer GENERATED BY DEFAULT AS IDENTITY,
            "Title" character varying(255) NOT NULL,
            "ProvinceId" integer NOT NULL,
            "CityId" integer,
            "CreationDate" timestamp with time zone NOT NULL,
            "ModificationDate" timestamp with time zone,
            "IsDeleted" boolean NOT NULL,
            CONSTRAINT "PK_City" PRIMARY KEY ("Id"),
            CONSTRAINT "FK_City_City_CityId"
                FOREIGN KEY ("CityId") REFERENCES "DM"."City" ("Id") ON DELETE RESTRICT,
            CONSTRAINT "FK_City_Province_ProvinceId"
                FOREIGN KEY ("ProvinceId") REFERENCES "DM"."Province" ("Id") ON DELETE RESTRICT
        );
        """,

        # Address
        """
        CREATE TABLE IF NOT EXISTS "DM"."Address" (
            "Id" integer GENERATED BY DEFAULT AS IDENTITY,
            "Detail" character varying(255) NOT NULL,
            "PostalCode" character varying(10) NOT NULL,
            "Mobile" bigint NOT NULL,
            "Phone" character varying(32) NOT NULL,
            "Email" character varying(100) NOT NULL,
            "Fax" character varying(32) NOT NULL,
            "ProvinceId" integer NOT NULL,
            "CityId" integer NOT NULL,
            "CreationDate" timestamp with time zone NOT NULL,
            "ModificationDate" timestamp with time zone,
            "IsDeleted" boolean NOT NULL,
            CONSTRAINT "PK_Address" PRIMARY KEY ("Id"),
            CONSTRAINT "FK_Address_City_CityId"
                FOREIGN KEY ("CityId") REFERENCES "DM"."City" ("Id") ON DELETE RESTRICT,
            CONSTRAINT "FK_Address_Province_ProvinceId"
                FOREIGN KEY ("ProvinceId") REFERENCES "DM"."Province" ("Id") ON DELETE RESTRICT
        );
        """,

        # Manufacturer
        """
        CREATE TABLE IF NOT EXISTS "DM"."Manufacturer" (
            "Id" integer GENERATED BY DEFAULT AS IDENTITY,
            "Name" character varying(255) NOT NULL,
            "ParentId" integer,
            "AddressId" integer NOT NULL,
            "CreationDate" timestamp with time zone NOT NULL,
            "ModificationDate" timestamp with time zone,
            "IsDeleted" boolean NOT NULL,
            CONSTRAINT "PK_Manufacturer" PRIMARY KEY ("Id"),
            CONSTRAINT "FK_Manufacturer_Address_AddressId"
                FOREIGN KEY ("AddressId") REFERENCES "DM"."Address" ("Id") ON DELETE RESTRICT,
            CONSTRAINT "FK_Manufacturer_Manufacturer_ParentId"
                FOREIGN KEY ("ParentId") REFERENCES "DM"."Manufacturer" ("Id") ON DELETE RESTRICT
        );
        """,

        # Representation
        """
        CREATE TABLE IF NOT EXISTS "DM"."Representation" (
            "Id" integer GENERATED BY DEFAULT AS IDENTITY,
            "Name" character varying(64) NOT NULL,
            "Activated" boolean NOT NULL,
            "AddressId" integer NOT NULL,
            "CreationDate" timestamp with time zone NOT NULL,
            "ModificationDate" timestamp with time zone,
            "IsDeleted" boolean NOT NULL,
            CONSTRAINT "PK_Representation" PRIMARY KEY ("Id"),
            CONSTRAINT "FK_Representation_Address_AddressId"
                FOREIGN KEY ("AddressId") REFERENCES "DM"."Address" ("Id") ON DELETE RESTRICT
        );
        """,

        # Device
        """
        CREATE TABLE IF NOT EXISTS "DM"."Device" (
            "Id" integer GENERATED BY DEFAULT AS IDENTITY,
            "EntityId" bigint,
            "DeviceStatus" integer NOT NULL,
            "UserInstallerId" integer,
            "InstallationDate" timestamp with time zone,
            "Activated" boolean NOT NULL,
            "RepresentationId" integer,
            "RepresentationInstallerId" integer,
            "CreationDate" timestamp with time zone NOT NULL,
            "ModificationDate" timestamp with time zone,
            "IsDeleted" boolean NOT NULL,
            CONSTRAINT "PK_Device" PRIMARY KEY ("Id"),
            CONSTRAINT "FK_Device_Representation_RepresentationId"
                FOREIGN KEY ("RepresentationId") REFERENCES "DM"."Representation" ("Id") ON DELETE RESTRICT,
            CONSTRAINT "FK_Device_Representation_RepresentationInstallerId"
                FOREIGN KEY ("RepresentationInstallerId") REFERENCES "DM"."Representation" ("Id") ON DELETE RESTRICT
        );
        """,

        # DeviceConfig
        """
        CREATE TABLE IF NOT EXISTS "DM"."DeviceConfig" (
            "Id" integer GENERATED BY DEFAULT AS IDENTITY,
            "ConfigHex" character varying(255) NOT NULL,
            "DeviceId" integer NOT NULL,
            "DeviceConfigTemplateId" integer NOT NULL,
            "CreationDate" timestamp with time zone NOT NULL,
            "ModificationDate" timestamp with time zone,
            "IsDeleted" boolean NOT NULL,
            CONSTRAINT "PK_DeviceConfig" PRIMARY KEY ("Id"),
            CONSTRAINT "FK_DeviceConfig_DeviceConfigTemplate_DeviceConfigTemplateId"
                FOREIGN KEY ("DeviceConfigTemplateId") REFERENCES "DM"."DeviceConfigTemplate" ("Id") ON DELETE RESTRICT,
            CONSTRAINT "FK_DeviceConfig_Device_DeviceId"
                FOREIGN KEY ("DeviceId") REFERENCES "DM"."Device" ("Id") ON DELETE RESTRICT
        );
        """,

        # DeviceItem
        """
        CREATE TABLE IF NOT EXISTS "DM"."DeviceItem" (
            "Id" integer GENERATED BY DEFAULT AS IDENTITY,
            "Name" character varying(64),
            "DeviceItemType" integer NOT NULL,
            "Version" character varying(255),
            "SerialNo" character varying(255) NOT NULL,
            "OsVersion" character varying(20),
            "FirmwareVersion" character varying(20),
            "BootLoaderVersion" character varying(20),
            "BoardVersion" character varying(20),
            "IMEI1" character varying(255),
            "IMEI2" character varying(255),
            "ProductionDate" timestamp with time zone NOT NULL,
            "InstallationDate" timestamp with time zone NOT NULL,
            "UserInstallerId" integer,
            "DeviceItemStatus" integer NOT NULL,
            "Activated" boolean NOT NULL,
            "DeviceId" integer NOT NULL,
            "RepresentationId" integer,
            "RepresentationInstallerId" integer,
            "ManufacturerId" integer NOT NULL,
            "CreationDate" timestamp with time zone NOT NULL,
            "ModificationDate" timestamp with time zone,
            "IsDeleted" boolean NOT NULL,
            CONSTRAINT "PK_DeviceItem" PRIMARY KEY ("Id"),
            CONSTRAINT "FK_DeviceItem_Device_DeviceId"
                FOREIGN KEY ("DeviceId") REFERENCES "DM"."Device" ("Id") ON DELETE RESTRICT,
            CONSTRAINT "FK_DeviceItem_Manufacturer_ManufacturerId"
                FOREIGN KEY ("ManufacturerId") REFERENCES "DM"."Manufacturer" ("Id") ON DELETE RESTRICT,
            CONSTRAINT "FK_DeviceItem_Representation_RepresentationId"
                FOREIGN KEY ("RepresentationId") REFERENCES "DM"."Representation" ("Id") ON DELETE RESTRICT,
            CONSTRAINT "FK_DeviceItem_Representation_RepresentationInstallerId"
                FOREIGN KEY ("RepresentationInstallerId") REFERENCES "DM"."Representation" ("Id") ON DELETE RESTRICT
        );
        """,

        # SimCard
        """
        CREATE TABLE IF NOT EXISTS "DM"."SimCard" (
            "Id" integer GENERATED BY DEFAULT AS IDENTITY,
            "Number" bigint NOT NULL,
            "Serial" character varying(64) NOT NULL,
            "NetworkOperatorType" character varying(10) NOT NULL,
            "Activated" boolean NOT NULL,
            "RepresentationId" integer,
            "DeviceId" integer,
            "CreationDate" timestamp with time zone NOT NULL,
            "ModificationDate" timestamp with time zone,
            "IsDeleted" boolean NOT NULL,
            CONSTRAINT "PK_SimCard" PRIMARY KEY ("Id"),
            CONSTRAINT "FK_SimCard_Device_DeviceId"
                FOREIGN KEY ("DeviceId") REFERENCES "DM"."Device" ("Id") ON DELETE RESTRICT,
            CONSTRAINT "FK_SimCard_Representation_RepresentationId"
                FOREIGN KEY ("RepresentationId") REFERENCES "DM"."Representation" ("Id") ON DELETE RESTRICT
        );
        """,

        # DeviceItemHistory
        """
        CREATE TABLE IF NOT EXISTS "DM"."DeviceItemHistory" (
            "Id" integer GENERATED BY DEFAULT AS IDENTITY,
            "Title" character varying(64) NOT NULL,
            "Action" character varying(255) NOT NULL,
            "EntityId" bigint NOT NULL,
            "UserId" integer NOT NULL,
            "Date" timestamp with time zone NOT NULL,
            "DeviceItemId" integer NOT NULL,
            "DeviceId" integer NOT NULL,
            "RepresentationId" integer NOT NULL,
            "CreationDate" timestamp with time zone NOT NULL,
            "ModificationDate" timestamp with time zone,
            "IsDeleted" boolean NOT NULL,
            CONSTRAINT "PK_DeviceItemHistory" PRIMARY KEY ("Id"),
            -- NOTE: The DDL from the question references Device twice in different FKs.
            -- Possibly a mismatch in the schema. We'll keep them as is:
            CONSTRAINT "FK_DeviceItemHistory_DeviceItem_DeviceId"
                FOREIGN KEY ("DeviceId") REFERENCES "DM"."DeviceItem" ("Id") ON DELETE RESTRICT,
            CONSTRAINT "FK_DeviceItemHistory_Device_DeviceId"
                FOREIGN KEY ("DeviceId") REFERENCES "DM"."Device" ("Id") ON DELETE RESTRICT,
            CONSTRAINT "FK_DeviceItemHistory_Representation_RepresentationId"
                FOREIGN KEY ("RepresentationId") REFERENCES "DM"."Representation" ("Id") ON DELETE RESTRICT
        );
        """,

        # DeviceSpec
        """
        CREATE TABLE IF NOT EXISTS "DM"."DeviceSpec" (
            "Id" integer GENERATED BY DEFAULT AS IDENTITY,
            "DeviceItemSpecType" integer NOT NULL,
            "SpecValue" character varying(255) NOT NULL,
            "DeviceItemId" integer NOT NULL,
            "CreationDate" timestamp with time zone NOT NULL,
            "ModificationDate" timestamp with time zone,
            "IsDeleted" boolean NOT NULL,
            CONSTRAINT "PK_DeviceSpec" PRIMARY KEY ("Id"),
            CONSTRAINT "FK_DeviceSpec_DeviceItem_DeviceItemId"
                FOREIGN KEY ("DeviceItemId") REFERENCES "DM"."DeviceItem" ("Id") ON DELETE RESTRICT
        );
        """,

        # Insert some default values
        """
        INSERT INTO "DM"."CommonBaseType" ("Id", "CreationDate", "Icon", "IsDeleted", "ModificationDate", "Title")
        VALUES (
            1000,
            TIMESTAMPTZ '2024-12-31T11:37:28.244057Z',
            '',
            FALSE,
            NULL,
            'DeviceItemType'
        )
        ON CONFLICT ("Id") DO NOTHING;
        """,

        # Insert a few CommonBaseValue rows
        """
        INSERT INTO "DM"."CommonBaseValue" ("Id", "CommonBaseTypeId", "CreationDate", "Icon", "IsDeleted", "ModificationDate", "Title")
        VALUES (1000883, 1000, TIMESTAMPTZ '2024-12-31T11:37:28.244104Z', '', FALSE, NULL, 'DieselFuel')
        ON CONFLICT ("Id") DO NOTHING;
        """,
        """
        INSERT INTO "DM"."CommonBaseValue" ("Id", "CommonBaseTypeId", "CreationDate", "Icon", "IsDeleted", "ModificationDate", "Title")
        VALUES (1000884, 1000, TIMESTAMPTZ '2024-12-31T11:37:28.24411Z', '', FALSE, NULL, 'Gasoline')
        ON CONFLICT ("Id") DO NOTHING;
        """,
        """
        INSERT INTO "DM"."CommonBaseValue" ("Id", "CommonBaseTypeId", "CreationDate", "Icon", "IsDeleted", "ModificationDate", "Title")
        VALUES (10003296, 1000, TIMESTAMPTZ '2024-12-31T11:37:28.24411Z', '', FALSE, NULL, 'Gasoline_CNG')
        ON CONFLICT ("Id") DO NOTHING;
        """,
        """
        INSERT INTO "DM"."CommonBaseValue" ("Id", "CommonBaseTypeId", "CreationDate", "Icon", "IsDeleted", "ModificationDate", "Title")
        VALUES (10003323, 1000, TIMESTAMPTZ '2024-12-31T11:37:28.24411Z', '', FALSE, NULL, 'Gasoline_CNG_Conversion')
        ON CONFLICT ("Id") DO NOTHING;
        """,
        """
        INSERT INTO "DM"."CommonBaseValue" ("Id", "CommonBaseTypeId", "CreationDate", "Icon", "IsDeleted", "ModificationDate", "Title")
        VALUES (10003325, 1000, TIMESTAMPTZ '2024-12-31T11:37:28.244111Z', '', FALSE, NULL, 'Kerosene')
        ON CONFLICT ("Id") DO NOTHING;
        """,
        """
        INSERT INTO "DM"."CommonBaseValue" ("Id", "CommonBaseTypeId", "CreationDate", "Icon", "IsDeleted", "ModificationDate", "Title")
        VALUES (10003377, 1000, TIMESTAMPTZ '2024-12-31T11:37:28.244111Z', '', FALSE, NULL, 'Gasoline_Hybrid')
        ON CONFLICT ("Id") DO NOTHING;
        """,

        # Create indexes
        """
        CREATE INDEX IF NOT EXISTS "IX_Address_CityId" ON "DM"."Address" ("CityId");
        """,
        """
        CREATE INDEX IF NOT EXISTS "IX_Address_ProvinceId" ON "DM"."Address" ("ProvinceId");
        """,
        """
        CREATE INDEX IF NOT EXISTS "IX_City_CityId" ON "DM"."City" ("CityId");
        """,
        """
        CREATE INDEX IF NOT EXISTS "IX_City_ProvinceId" ON "DM"."City" ("ProvinceId");
        """,
        """
        CREATE INDEX IF NOT EXISTS "IX_CommonBaseValue_CommonBaseTypeId"
            ON "DM"."CommonBaseValue" ("CommonBaseTypeId");
        """,
        """
        CREATE INDEX IF NOT EXISTS "IX_Device_RepresentationId" ON "DM"."Device" ("RepresentationId");
        """,
        """
        CREATE INDEX IF NOT EXISTS "IX_Device_RepresentationInstallerId" ON "DM"."Device" ("RepresentationInstallerId");
        """,
        """
        CREATE INDEX IF NOT EXISTS "IX_DeviceConfig_DeviceConfigTemplateId"
            ON "DM"."DeviceConfig" ("DeviceConfigTemplateId");
        """,
        """
        CREATE INDEX IF NOT EXISTS "IX_DeviceConfig_DeviceId" ON "DM"."DeviceConfig" ("DeviceId");
        """,
        """
        CREATE INDEX IF NOT EXISTS "IX_DeviceConfigTemplateItem_DeviceConfigTemplateId"
            ON "DM"."DeviceConfigTemplateItem" ("DeviceConfigTemplateId");
        """,
        """
        CREATE INDEX IF NOT EXISTS "IX_DeviceItem_DeviceId" ON "DM"."DeviceItem" ("DeviceId");
        """,
        """
        CREATE INDEX IF NOT EXISTS "IX_DeviceItem_ManufacturerId" ON "DM"."DeviceItem" ("ManufacturerId");
        """,
        """
        CREATE INDEX IF NOT EXISTS "IX_DeviceItem_RepresentationId" ON "DM"."DeviceItem" ("RepresentationId");
        """,
        """
        CREATE INDEX IF NOT EXISTS "IX_DeviceItem_RepresentationInstallerId"
            ON "DM"."DeviceItem" ("RepresentationInstallerId");
        """,
        """
        CREATE INDEX IF NOT EXISTS "IX_DeviceItemHistory_DeviceId"
            ON "DM"."DeviceItemHistory" ("DeviceId");
        """,
        """
        CREATE INDEX IF NOT EXISTS "IX_DeviceItemHistory_RepresentationId"
            ON "DM"."DeviceItemHistory" ("RepresentationId");
        """,
        """
        CREATE INDEX IF NOT EXISTS "IX_DeviceSpec_DeviceItemId" ON "DM"."DeviceSpec" ("DeviceItemId");
        """,
        """
        CREATE INDEX IF NOT EXISTS "IX_Manufacturer_AddressId" ON "DM"."Manufacturer" ("AddressId");
        """,
        """
        CREATE INDEX IF NOT EXISTS "IX_Manufacturer_ParentId" ON "DM"."Manufacturer" ("ParentId");
        """,
        """
        CREATE INDEX IF NOT EXISTS "IX_Representation_AddressId" ON "DM"."Representation" ("AddressId");
        """,
        """
        CREATE INDEX IF NOT EXISTS "IX_SimCard_DeviceId" ON "DM"."SimCard" ("DeviceId");
        """,
        """
        CREATE INDEX IF NOT EXISTS "IX_SimCard_RepresentationId" ON "DM"."SimCard" ("RepresentationId");
        """,

        # Fix sequences
        """
        SELECT setval(
            pg_get_serial_sequence('"DM"."CommonBaseType"', 'Id'),
            GREATEST(
                (SELECT MAX("Id") FROM "DM"."CommonBaseType") + 1,
                nextval(pg_get_serial_sequence('"DM"."CommonBaseType"', 'Id'))
            ),
            false
        );
        """,
        """
        SELECT setval(
            pg_get_serial_sequence('"DM"."CommonBaseValue"', 'Id'),
            GREATEST(
                (SELECT MAX("Id") FROM "DM"."CommonBaseValue") + 1,
                nextval(pg_get_serial_sequence('"DM"."CommonBaseValue"', 'Id'))
            ),
            false
        );
        """,

        # Insert into __EFMigrationsHistory
        """
        INSERT INTO "__EFMigrationsHistory" ("MigrationId", "ProductVersion")
        VALUES ('20241231113728_Init', '9.0.0')
        ON CONFLICT DO NOTHING;
        """
    ]

    # Execute all statements
    for statement in schema_statements:
        try:
            client.execute_query(statement)
        except Exception as ex:
            logger.error(f"Error running schema statement: {ex}")
            raise

    logger.info("Schema creation/updates completed successfully.")


def seed_data(client):
    """
    Inserts random rows across multiple tables to create benchmark data.
    Adjust as needed for your load test scenario.
    """
    try:
        # Example 1: Seed random provinces
        cities_per_province = 3

        for _ in range(5):  # Seed 5 provinces
            prov_title = "Prov_" + "".join(random.choices(string.ascii_uppercase, k=4))
            now = datetime.datetime.utcnow()

            # Insert province
            province = client.execute_query(
                """
                INSERT INTO "DM"."Province" ("Title", "CreationDate", "IsDeleted")
                VALUES (%s, %s, FALSE)
                RETURNING "Id";
                """,
                (prov_title, now)
            )
            
            # Retrieve the newly created Province ID
            province_id = province.result[0][0]
            
            for _ in range(cities_per_province):  # Seed cities for this province
                city_title = "City_" + "".join(random.choices(string.ascii_uppercase, k=6))
                client.execute_query(
                    """
                    INSERT INTO "DM"."City" ("Title", "ProvinceId", "CreationDate", "IsDeleted")
                    VALUES (%s, %s, %s, FALSE);
                    """,
                    (city_title, province_id, now)
                )

        # You could query the existing provinces, pick random IDs, etc.
        province_ids_res = client.execute_query('SELECT "Id" FROM "DM"."Province" LIMIT 5;')
        
        if province_ids_res.success and province_ids_res.response_length:
            province_ids = [row[0] for row in province_ids_res.result]
            for _ in range(5):
                detail = "Addr_" + "".join(random.choices(string.ascii_lowercase, k=5))
                postal_code = "".join(random.choices(string.digits, k=10))
                phone = "".join(random.choices(string.digits, k=8))
                email = f"test_{random.randint(1,90999)}_{random.randint(1,90999)}@example.com"
                now = datetime.datetime.utcnow()
                chosen_prov = random.choice(province_ids)

                client.execute_query(
                    """
                    INSERT INTO "DM"."Address" ("Detail", "PostalCode", "Mobile", "Phone", "Email",
                                                "Fax", "ProvinceId", "CityId", "CreationDate", "IsDeleted")
                    VALUES (%s, %s, %s, %s, %s, %s, %s, 1, %s, FALSE);
                    """,
                    (detail, postal_code, random.randint(9000000000, 9999999999),
                     phone, email, "FAKEFAX", chosen_prov, now)
                )

        # You could keep going, seeding more tables like "Manufacturer", "Device", etc.
        # for a truly complex seeding.

        logger.info("Seed data completed successfully.")

    except Exception as e:
        logger.error(f"Error seeding data: {e}")
        raise
    
    try:
        # 1) Make sure there's at least one Address. If not, insert a minimal one.
        addr_check_res = client.execute_query('SELECT "Id" FROM "DM"."Address" LIMIT 1;')
        if not addr_check_res.success or not addr_check_res.response_length:
            logger.info("No addresses found. Inserting a minimal Address for Manufacturer.")
            now = datetime.datetime.utcnow()
            client.execute_query(
                """
                INSERT INTO "DM"."Address"
                    ("Detail", "PostalCode", "Mobile", "Phone", "Email", "Fax", 
                     "ProvinceId", "CityId", "CreationDate", "IsDeleted")
                VALUES 
                    ('Default Address', '1234567890', 9123456789, '123456', 
                     'default@example.com', '1234', 1, 1, %s, FALSE);
                """,
                (now,)
            )

        # Retrieve all addresses (or limit if you have many).
        # We'll pick random addresses to associate with manufacturers.
        addr_res = client.execute_query('SELECT "Id" FROM "DM"."Address";')
        if not addr_res.success or not addr_res.response_length:
            raise Exception("Could not find or create an Address for Manufacturer.")

        address_ids = [row[0] for row in addr_res.result]

        # 2) Insert 'count' manufacturers referencing random addresses
        now = datetime.datetime.utcnow()
        count = 100
        for _ in range(count):
            name = "Manu_" + "".join(random.choices(string.ascii_letters, k=5))
            chosen_address = random.choice(address_ids)

            # Optionally, randomly pick an existing Manufacturer to be the 'ParentId'
            # For simplicity, let's do it for half of them:
            parent_id = None
            if random.random() > 0.5:  # ~50% chance to have a parent
                # Get a random existing Manufacturer (if any exist yet).
                parent_check = client.execute_query(
                    'SELECT "Id" FROM "DM"."Manufacturer" ORDER BY random() LIMIT 1;'
                )
                if parent_check.success and parent_check.response_length:
                    parent_id = parent_check.result[0][0]

            # Insert the Manufacturer row, referencing the random address
            # and the random (or None) parent
            insert_query = """
                INSERT INTO "DM"."Manufacturer"
                    ("Name", "ParentId", "AddressId", "CreationDate", "IsDeleted")
                VALUES
                    (%s, %s, %s, %s, FALSE);
            """
            params = (name, parent_id, chosen_address, now)
            client.execute_query(insert_query, params)

        logger.info(f"Successfully inserted {count} Manufacturer(s).")

    except Exception as e:
        logger.error(f"Error seeding manufacturers: {e}")



def write_data(client):
    """
    Example: Insert into multiple DM tables in one go,
    referencing existing rows, to stress the DB with writes.
    """
    try:
        # 1) Insert new device

        now = datetime.datetime.utcnow()
        device_res = client.execute_query(
            """
            INSERT INTO "DM"."Device" 
                ("DeviceStatus", "Activated", "CreationDate", "IsDeleted")
            VALUES 
                (%s, %s, %s, FALSE)
            RETURNING "Id";
            """,
            (random.randint(1,5), True, now)
        )

        if not device_res.success or not device_res.response_length:
            raise Exception("Failed to insert new Device.")

        new_device_id = device_res.result[0][0]
        # 2) Insert a new device item
        production_date = now - datetime.timedelta(days=random.randint(1,100))
        install_date = now - datetime.timedelta(days=random.randint(1,50))

        device_item_res = client.execute_query(
            """
            INSERT INTO "DM"."DeviceItem"
                ("Name", "DeviceItemType", "SerialNo", 
                 "ProductionDate", "InstallationDate", 
                 "DeviceItemStatus", "Activated", "DeviceId", 
                 "ManufacturerId", "CreationDate", "IsDeleted")
            VALUES
                (%s, %s, %s,
                 %s, %s,
                 %s, %s, %s,
                 1,  -- Hardcode manufacturer ID or pick randomly from existing
                 %s, FALSE)
            RETURNING "Id";
            """,
            (
                "DevItem_" + "".join(random.choices(string.ascii_letters, k=4)),
                random.randint(1,10),
                "SN_" + "".join(random.choices(string.ascii_letters + string.digits, k=8)),
                production_date,
                install_date,
                random.randint(1,5),
                True,
                new_device_id,
                now
            )
        )
        if not device_item_res.success or not device_item_res.response_length:
            raise Exception("Failed to insert new DeviceItem.")

        return device_item_res

    except Exception as e:
        logger.error(f"write error: {e}")
        raise


def read_join(client):
    """
    A complex SELECT that joins multiple tables (Device, DeviceItem, SimCard, etc.)
    to stress the DB. Adjust the JOIN logic depending on your real needs.
    """
    try:
        query = """
        SELECT 
            d."Id" as device_id, 
            d."DeviceStatus",
            di."Id" as device_item_id,
            di."SerialNo",
            s."Id" as sim_id,
            s."Number" as sim_number,
            rep."Name" as representation_name
        FROM "DM"."Device" d
        LEFT JOIN "DM"."DeviceItem" di ON di."DeviceId" = d."Id"
        LEFT JOIN "DM"."SimCard" s ON s."DeviceId" = d."Id"
        LEFT JOIN "DM"."Representation" rep ON rep."Id" = d."RepresentationId"
        WHERE d."IsDeleted" = FALSE
        ORDER BY d."Id" DESC
        LIMIT 50;
        """
        result = client.execute_query(query)
        if not result.success or not result.response_length:
            raise Exception("Failed to insert new DeviceItem.")

        return result
    except Exception as e:
        logger.error(f"read_join error: {e}")
        raise
